
Tasks:

============ waiting ==============
	
	socket.send('p'): encode control commands into this one 8bit(256) data.
	Add control to JS player movement control with six moving directions.
	A golang websocket service that recieves RPC calls for every A.I commands and player commands, and changes positions accordingly 
	Add "is_enemy" boolean to player/ai JS classes
	Ranger A.I follows the player, only allow to move within some R from the player as the centre
	Defender A.I is stationary, only allowed to move within some R from the deployed point.
	Virus A.I is non-physical, capable to remotely control opposite's physical form A.I for a limited peroid of time.
	Winner captures the source code(A.I). Captured A.I only lives for 1 hour or so.
	Choose Collision detection algorithm - OctTree for 3D, QuadTree for 2D
	Implement Map flooding tool using selected CD algorithm above, gives Octree/QuadTree in JSON
	Implement CD function in JS, reads the JSON above as input

============== done ===============

Nov 8th, 2010
	a server folder, a client folder
	Figure out a way to get channel info, and get more than one packet
	A Go player class, A Go A.I class
	A JS player class, A JS A.I class
	Seperate WebSocket from main package
	A golang websocket service that tells client 12 times per second about every unit's positions using json array

Nov 9th, 2010
	Add Canvas to html page
	Design a very simple Player Avatar
	Design a very simple A.I Avatar
	Add Player to Canvas
	Add A.I to Canvas 

Nov 10th, 2010
	Sync position of Go player and JS player, through websocket.
	Animate Go Player positions
