	<script type="text/javascript">
		var stats, scene, renderer;
		var camera, cameraControl;
		var microphysics;

		if( !init() ) {
			animate();
		}

		console.log(scene);

		// init the scene
		function init(){

			if( Detector.webgl ){
				renderer = new THREE.WebGLRenderer({
					antialias		: true,	// to get smoother output
					preserveDrawingBuffer	: true	// to allow screenshot
				});
				renderer.setClearColorHex( 0xBBBBBB, 1 );
			}else{
				Detector.addGetWebGLMessage();
				return true;
			}
			renderer.setSize( window.innerWidth, window.innerHeight );
			renderer.shadowMapEnabled = true;
			document.getElementById('container').appendChild(renderer.domElement);

			stats = new Stats();
			stats.domElement.style.position	= 'absolute';
			stats.domElement.style.bottom	= '0px';
			document.body.appendChild( stats.domElement );

			// create a scene
			scene = new THREE.Scene();

			//start microphysics
			microphysics = new THREEx.Microphysics({
				timeStep : 1/180
			});
			microphysics.start();

			// put a camera in the scene
			camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 10000 );
			camera.position.set(0, 0, 200);
			scene.add(camera);

			// create a camera contol
			cameraControls	= new THREEx.DragPanControls(camera)

			// transparently support window resize
			THREEx.WindowResize.bind(renderer, camera);
			// allow 'p' to make screenshot
			THREEx.Screenshot.bindKey(renderer);
			// allow 'f' to go fullscreen where this feature is supported
			if( THREEx.FullScreen.available() ){
				THREEx.FullScreen.bindKey();
				document.getElementById('inlineDoc').innerHTML	+= "- <i>f</i> for fullscreen";
			}

			// here you add your objects
			// - you will most likely replace this part by your own

			//construct a light
			var light = new THREE.SpotLight();
			light.position.set(170,330,-160);
			light.castShadow = true;
			scene.add(light);

			//construct a ground
			var groundGeo = new THREE.PlaneGeometry(400, 400, 10, 10);
			var groundMat = new THREE.MeshLambertMaterial({color: 0xffffff});
			var ground = new THREE.Mesh(groundGeo, groundMat);
			ground.rotation.x = -Math.PI/2;
			ground.position.y = -5;
			ground.receiveShadow = true;
			scene.add(ground);

			//construct player1
			var player1Geo = new THREE.CubeGeometry(5,5,5);
			var player1Mat = new THREE.MeshLambertMaterial({color: 0xffffff});
			var player1 = new THREE.Mesh(player1Geo, player1Mat);
			player1.castShadow = true;
			player1.receiveShadow = true;
			player1.position.x = 100;
			player1.position.y = -2.5;
			player1.position.z = 5;
			scene.add(player1);
			//construct ai1
			var ai1Geo = new THREE.CubeGeometry(5,5,5);
			var ai1Mat = new THREE.MeshLambertMaterial({color: 0xffffff});
			var ai1 = new THREE.Mesh(ai1Geo, ai1Mat);
			ai1.castShadow = true;
			ai1.receiveShadow = true;
			ai1.position.x = 100;
			ai1.position.y = -2.5;
			ai1.position.z = -5;
			scene.add(ai1);

			//construct player2
			var player2Geo = new THREE.CubeGeometry(5,5,5);
			var player2Mat = new THREE.MeshLambertMaterial({color: 0xffffff});
			var player2 = new THREE.Mesh(player2Geo, player2Mat);
			player2.castShadow = true;
			player2.receiveShadow = true;
			player2.position.x = -100;
			player2.position.y = -2.5;
			player2.position.z = 5;
			scene.add(player2);
			//construct ai2
			var ai2Geo = new THREE.CubeGeometry(5,5,5);
			var ai2Mat = new THREE.MeshLambertMaterial({color: 0xffffff});
			var ai2 = new THREE.Mesh(ai2Geo, ai2Mat);
			ai2.castShadow = true;
			ai2.receiveShadow = true;
			ai2.position.x = -100;
			ai2.position.y = -2.5;
			ai2.position.z = -5;
			scene.add(ai2);

			//construct a coordinate helper
			coordHelper(scene);

		}

		// animation loop
		function animate() {

			// loop on request animation loop
			// - it has to be at the begining of the function
			// - see details at http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
			requestAnimationFrame( animate );

			// do the render
			render();

			// update stats
			stats.update();
		}

		// render the scene
		function render() {

			// update camera controls
			cameraControls.update();

			// actually render the scene
			renderer.render( scene, camera );
		}

		//helper function to show coordinate
		function coordHelper(scene) {
			//draw coords
			var coordGeo = new THREE.Geometry();
			coordGeo.vertices.push (
				v(-200,0,0), v(200,0,0),/*x coord*/
				v(0,-200,0), v(0,200,0),/*y coord*/
				v(0,0,-200), v(0,0,200),/*z coord*/
				v(200,1,0), v(200,-1,0),/*x units*/
				v(150,1,0), v(150,-1,0),
				v(100,1,0), v(100,-1,0),
				v(50,1,0), v(50,-1,0),
				v(-50,1,0), v(-50,-1,0),
				v(-100,1,0), v(-100,-1,0),
				v(-150,1,0), v(-150,-1,0),
				v(-200,1,0), v(-200,-1,0),
				v(1,200,0), v(-1,200,0),/*y units*/
				v(1,150,0), v(-1,150,0),
				v(1,100,0), v(-1,100,0),
				v(1,50,0), v(-1,50,0),
				v(1,-50,0), v(-1,-50,0),
				v(1,-100,0), v(-1,-100,0),
				v(1,-150,0), v(-1,-150,0),
				v(1,-200,0), v(-1,-200,0),
				v(0,1,200), v(0,-1,200),/*z units*/
				v(0,1,150), v(0,-1,150),
				v(0,1,100), v(0,-1,100),
				v(0,1,50), v(0,-1,50),
				v(0,1,-50), v(0,-1,-50),
				v(0,1,-100), v(0,-1,-100),
				v(0,1,-150), v(0,-1,-150),
				v(0,1,-200), v(0,-1,-200)
			);
			var coordMat = new THREE.LineBasicMaterial({color: 0x000000, lineWidth:1});
			var coord = new THREE.Line(coordGeo, coordMat);
			coord.type = THREE.Lines;
			scene.add(coord);
		}

		//vertex maker
		function v(x,y,z) {
			return new THREE.Vertex(new THREE.Vector3(x,y,z));
		}
	</script>
