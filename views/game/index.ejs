	<script type="text/javascript">
		var stats, scene, renderer;
		var camera, cameraControl;
		var keyboard;
		var ground;
		var dynamicsWorld;
		var player1, player2, ai1, ai2;

		if( !init() ) {
			animate();
		}

		// init the scene
		function init(){

			if( Detector.webgl ){
				renderer = new THREE.WebGLRenderer({
					antialias		: true,	// to get smoother output
					preserveDrawingBuffer	: true	// to allow screenshot
				});
				renderer.setClearColorHex( 0xBBBBBB, 1 );
			} else {
				Detector.addGetWebGLMessage();
				return true;
			}
			renderer.setSize( window.innerWidth, window.innerHeight );
			renderer.shadowMapEnabled = true;
			document.getElementById('container').appendChild(renderer.domElement);

			stats = new Stats();
			stats.domElement.style.position	= 'absolute';
			stats.domElement.style.bottom	= '0px';
			document.body.appendChild( stats.domElement );

			// create a scene
			scene = new THREE.Scene();

			//start physics
			(function(){
			var collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
			var dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);
			var overlappingPairCache = new Ammo.btDbvtBroadphase();
			var solver = new Ammo.btSequentialImpulseConstraintSolver();
			dynamicsWorld = new Ammo.btDiscreteDynamicsWorld(dispatcher, overlappingPairCache, solver, collisionConfiguration);
			dynamicsWorld.setGravity(new Ammo.btVector3(0,-9.82,0));
			dynamicsWorld.trans = new Ammo.btTransform();
			dynamicsWorld.trans.setIdentity();})();

			// put a camera in the scene
			camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 10000 );
			camera.position.set(0, 0, 200);
			scene.add(camera);

			// create a camera contol
			cameraControls	= new THREEx.DragPanControls(camera)

			//start tracking keyboards
			keyboard = new THREEx.KeyboardState();

			// transparently support window resize
			THREEx.WindowResize.bind(renderer, camera);
			// allow 'p' to make screenshot
			THREEx.Screenshot.bindKey(renderer);
			// allow 'f' to go fullscreen where this feature is supported
			if( THREEx.FullScreen.available() ){
				THREEx.FullScreen.bindKey();
				document.getElementById('inlineDoc').innerHTML	+= "- <i>f</i> for fullscreen";
			}

			// here you add your objects
			// - you will most likely replace this part by your own

			//construct a light
			var light = new THREE.SpotLight();
			light.position.set(170,330,-160);
			light.castShadow = true;
			scene.add(light);

			//construct a ground
			var groundGeo = new THREE.PlaneGeometry(400, 400, 10, 10);
			//var groundGeo = new THREE.CubeGeometry(400, 0.1, 400);
			var groundMat = new THREE.MeshLambertMaterial({color: 0xffffff});
			ground = new THREE.Mesh(groundGeo, groundMat);
			ground.rotation.x = -Math.PI/2;
			ground.position.y = -5;
			ground.receiveShadow = true;
			scene.add(ground);
			//ammo part
			(function() {
				var groundShape = new Ammo.btBoxShape(new Ammo.btVector3(400, 0.5, 400));
				var groundTransform = new Ammo.btTransform();
				groundTransform.setIdentity();
				groundTransform.setOrigin(new Ammo.btVector3(0,-5.5,0));
				var mass = 0;
				var isDynamic = (mass != 0);
				var localInertia = new Ammo.btVector3(0, 0, 0);

				if (isDynamic) {
					groundShape.calculateLocalInertia(mass, localInertia);}
				var myMotionState = new Ammo.btDefaultMotionState(groundTransform);
				var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, myMotionState, groundShape, localInertia);
				ground.phybody = new Ammo.btRigidBody(rbInfo);
				dynamicsWorld.addRigidBody(ground.phybody);
			})();


			//construct player1
			var quat = new THREE.Quaternion();
			quat.setFromEuler(new THREE.Vector3(-30, 20, 0));
			player1 = new AICRAFT.Player(100, 125, 5, quat.x, quat.y, quat.z, quat.w);
			player1.buildMesh(THREE);
			scene.add(player1.mesh);
			player1.buildPhysic(Ammo);
			dynamicsWorld.addRigidBody(player1.phybody);
			
			//construct ai1
			quat.setFromEuler(new THREE.Vector3(30, 20, 0));
			ai1 = new AICRAFT.Ai(100,5,-5,quat.x,quat.y,quat.z,quat.w);
			ai1.buildMesh(THREE);
			scene.add(ai1.mesh);
			ai1.buildPhysic(Ammo);
			dynamicsWorld.addRigidBody(ai1.phybody);

			//construct player2
			quat.setFromEuler(new THREE.Vector3(-30, -20, 0));
			player2 = new AICRAFT.Player(-100,25,5,quat.x,quat.y,quat.z,quat.w);
			player2.buildMesh(THREE);
			scene.add(player2.mesh);
			player2.buildPhysic(Ammo);
			dynamicsWorld.addRigidBody(player2.phybody);

			//construct ai2
			quat.setFromEuler(new THREE.Vector3(30, -20, 0));
			ai2 = new AICRAFT.Ai(-100,135,-5,quat.x,quat.y,quat.z,quat.w);
			ai2.buildMesh(THREE);
			scene.add(ai2.mesh);
			ai2.buildPhysic(Ammo);
			dynamicsWorld.addRigidBody(ai2.phybody);

			//construct a coordinate helper
			coordHelper(scene);

		}

		// animation loop
		function animate() {

			// loop on request animation loop
			// - it has to be at the begining of the function
			// - see details at http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
			requestAnimationFrame( animate );

			// update inputs
			(function(){
			 	var impulse;
				var velocity = player1.phybody.getLinearVelocity();
				var absVelocity = Math.sqrt(velocity.getX()*velocity.getX() + velocity.getY()*velocity.getY() + velocity.getZ()*velocity.getZ()); 
				if (keyboard.pressed("w") && absVelocity < player1.maxSpeed && player1.position.y < 1) {
					player1.phybody.activate()
					impulse = new Ammo.btVector3(0,0,0-player1.acceleration); 
					player1.phybody.applyCentralImpulse(impulse);
				}
				if (keyboard.pressed("a") && absVelocity < player1.maxSpeed && player1.position.y < 1) {
					player1.phybody.activate()
					impulse = new Ammo.btVector3(0-player1.acceleration,0,0); 
					player1.phybody.applyCentralImpulse(impulse);
				}
				if (keyboard.pressed("s") &&  absVelocity < player1.maxSpeed && player1.position.y < 1) {
					player1.phybody.activate()
					impulse = new Ammo.btVector3(0,0,player1.acceleration); 
					player1.phybody.applyCentralImpulse(impulse);
				}
				if (keyboard.pressed("d") &&  absVelocity < player1.maxSpeed && player1.position.y < 1) {
					player1.phybody.activate()
					impulse = new Ammo.btVector3(player1.acceleration,0,0); 
					player1.phybody.applyCentralImpulse(impulse);
				}
				if (keyboard.pressed("e") && player1.position.y < 0.1) {
					player1.phybody.activate()
					impulse = new Ammo.btVector3(0,1,0); 
					player1.phybody.applyCentralImpulse(impulse);
				}
			})();

			// update physics
			dynamicsWorld.stepSimulation(1/30, 10);
			player1.physicAndGraphicUpdate(dynamicsWorld);
			ai1.physicAndGraphicUpdate(dynamicsWorld);
			player2.physicAndGraphicUpdate(dynamicsWorld);
			ai2.physicAndGraphicUpdate(dynamicsWorld);

			// update camera controls
			cameraControls.update();

			// do the render
			render();

			// update stats
			stats.update();
		}

		// render the scene
		function render() {


			// actually render the scene
			renderer.render( scene, camera );
		}

		//helper function to show coordinate
		function coordHelper(scene) {
			//draw coords
			var coordGeo = new THREE.Geometry();
			coordGeo.vertices.push (
				v(-200,0,0), v(200,0,0),/*x coord*/
				v(0,-200,0), v(0,200,0),/*y coord*/
				v(0,0,-200), v(0,0,200),/*z coord*/
				v(200,1,0), v(200,-1,0),/*x units*/
				v(150,1,0), v(150,-1,0),
				v(100,1,0), v(100,-1,0),
				v(50,1,0), v(50,-1,0),
				v(-50,1,0), v(-50,-1,0),
				v(-100,1,0), v(-100,-1,0),
				v(-150,1,0), v(-150,-1,0),
				v(-200,1,0), v(-200,-1,0),
				v(1,200,0), v(-1,200,0),/*y units*/
				v(1,150,0), v(-1,150,0),
				v(1,100,0), v(-1,100,0),
				v(1,50,0), v(-1,50,0),
				v(1,-50,0), v(-1,-50,0),
				v(1,-100,0), v(-1,-100,0),
				v(1,-150,0), v(-1,-150,0),
				v(1,-200,0), v(-1,-200,0),
				v(0,1,200), v(0,-1,200),/*z units*/
				v(0,1,150), v(0,-1,150),
				v(0,1,100), v(0,-1,100),
				v(0,1,50), v(0,-1,50),
				v(0,1,-50), v(0,-1,-50),
				v(0,1,-100), v(0,-1,-100),
				v(0,1,-150), v(0,-1,-150),
				v(0,1,-200), v(0,-1,-200)
			);
			var coordMat = new THREE.LineBasicMaterial({color: 0x000000, lineWidth:1});
			var coord = new THREE.Line(coordGeo, coordMat);
			coord.type = THREE.Lines;
			scene.add(coord);
		}

		//vertex maker
		function v(x,y,z) {
			return new THREE.Vertex(new THREE.Vector3(x,y,z));
		}

		//test socket.io
		/*var socket = io.connect('/');
		socket.on('news', function (data) {
			console.log(data);
			socket.emit('my other event', { my: 'data' });
		});*/

		//test now.js
		now.a = "cow";
		//now.ready is a callback setter
		now.ready(function(){now.logStuff("aabb");});
		//now.logStuff does not exist in the beginning.
		setTimeout(
				function(){
					now.logStuff("bbaa");
				} , 5500);

	</script>
