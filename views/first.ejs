<script src="/js/three.js.1"></script>
<script src="/js/jquery-1.7.1.min.js"></script>

<script>

init();

function init() {
	// set the scene size
	var WIDTH = 800,
		HEIGHT = 600;

	// set some camera attributes
	var VIEW_ANGLE = 60,
		ASPECT = WIDTH / HEIGHT,
		NEAR = 1,
		FAR = 1000;

	// get the DOM element to attach to
	// - assume we've got jQuery to hand
	var $container = $('#container');

	// create a WebGL renderer, camera
	// and a scene
	var renderer = new THREE.WebGLRenderer();
	var camera = new THREE.PerspectiveCamera(
					   VIEW_ANGLE,
					   ASPECT,
					   NEAR,
					   FAR );
	var cameraHelper = new THREE.CameraHelper( camera );
	camera.add( cameraHelper );
	//camera.rotation.z = -90 * (Math.PI/180);
	camera.position.z = 500;
	camera.position.y = -100;

	var scene = new THREE.Scene();

	// the camera starts at 0,0,0 so pull it back

	scene.add(camera);
	
	// start the renderer
	renderer.setSize(WIDTH, HEIGHT);

	// attach the render-supplied DOM element
	$container.append(renderer.domElement);

	// create the sphere's material
	var sphereMaterial = new THREE.MeshLambertMaterial(
	{
		color: 0x4ccccc
	});

	// set up the sphere vars
	var radius = 50, segments = 16, rings = 16;

	// create a new mesh with sphere geometry -
	// we will cover the sphereMaterial next!
	var sphere = new THREE.Mesh(
	new THREE.SphereGeometry(radius,
		segments,
		rings),
	sphereMaterial);

	// add the sphere to the scene
	scene.add(sphere);

	// Plane
	plane = new THREE.Mesh( new THREE.PlaneGeometry( 400, 400 ), new THREE.MeshBasicMaterial( { color: 0x4ccccc } ) );
	//plane.rotation.x = - 90 * ( Math.PI / 180 );
	plane.overdraw = true;
	scene.add( plane );

	// create a point light
	var pointLight = new THREE.PointLight( 0xFFFFFF );

	// set its position
	pointLight.position.x = 10;
	pointLight.position.y = 50;
	pointLight.position.z = 130;

	// add to the scene
	scene.add(pointLight);

	// draw!
	renderer.render(scene, camera);
	
}

</script>
