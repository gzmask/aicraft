<script src="/js/jquery-1.7.1.min.js"></script>
<script src="/js/three.js"></script>
<script src="/js/ammo.js"></script>

<script>
//global objects
var ScreenWidth = window.innerWidth/2;
var ScreenHeight = window.innerHeight/2;
var VIEW_ANGLE = 70,
	ASPECT = ScreenWidth / ScreenHeight,
	NEAR = 1,
	FAR = 1000;
var camera, scene, renderer, $container, sphere, plane, pointLight;

init_three();
init_ammo();
animate();

//ammo.js physics
function init_ammo() {
	var collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
	var dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);
	var overlappingPairCache = new Ammo.btDbvtBroadphase();
	var solver = new Ammo.btSequentialImpulseConstraintSolver();
	var dynamicsWorld = new Ammo.btDiscreteDynamicsWorld(dispatcher, overlappingPairCache, solver, collisionConfiguration);
	dynamicsWorld.setGravity(new Ammo.btVector3(0, -10, 0));
}

//three.js graphics

function init_three() {
	// get the DOM element to attach to
	// - assume we've got jQuery to hand
	$container = $('#container');

	scene = new THREE.Scene();

	renderer = new THREE.WebGLRenderer({ antialias: true, clearColor: 0x000000, clearAlpha: 1 });
	camera = new THREE.PerspectiveCamera(
					   VIEW_ANGLE,
					   ASPECT,
					   NEAR,
					   FAR );
	var cameraHelper = new THREE.CameraHelper( camera );
	camera.add( cameraHelper );
	//camera.rotation.x = -32 * (Math.PI/180);
	camera.position.y = 150;
	camera.position.z = 350;
	camera.lookAt( new THREE.Vector3(0,0,0) );

	scene.add(camera);
	
	// start the renderer
	renderer.setSize(ScreenWidth, ScreenHeight);

	// attach the render-supplied DOM element
	$container.append(renderer.domElement);

	// create the sphere's material
	var sphereMaterial = new THREE.MeshLambertMaterial(
	{
		color: 0x4ccccc
	});

	// set up the sphere vars
	var radius = 50, segments = 16, rings = 16;

	// create a new mesh with sphere geometry -
	// we will cover the sphereMaterial next!
	sphere = new THREE.Mesh(
	new THREE.SphereGeometry(radius,
		segments,
		rings),
	sphereMaterial);
	sphere.position.y = 50;

	// add the sphere to the scene
	scene.add(sphere);

	// Plane
	plane = new THREE.Mesh( new THREE.PlaneGeometry( 500, 500 ), new THREE.MeshBasicMaterial( { color: 0x4ccccc } ) );
	plane.rotation.x = - 90 * ( Math.PI / 180 );
	plane.overdraw = true;
	scene.add( plane );

	// create a point light
	pointLight = new THREE.PointLight( 0xFFFFFF );

	// set its position
	pointLight.position.x = 30;
	pointLight.position.y = 150;
	pointLight.position.z = 30;

	// add to the scene
	scene.add(pointLight);
}

function animate() {

	requestAnimationFrame( animate );

	plane.rotation.z += 0.01;
	render();
}

function render() {
	// draw!
	renderer.render(scene, camera);
}

</script>
